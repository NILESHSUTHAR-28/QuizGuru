[
    {
        "question": "What is the default value of a boolean variable in Java?",
        "optionA": "true",
        "optionB": "false",
        "optionC": "null",
        "optionD": "0",
        "answer": "false"
    },
    {
        "question": "Which of the following is not a valid data type in Java?",
        "optionA": "int",
        "optionB": "float",
        "optionC": "double",
        "optionD": "real",
        "answer": "real"
    },
    {
        "question": "What is the output of the following code?\nSystem.out.println(10 / 3);",
        "optionA": "3.333",
        "optionB": "3",
        "optionC": "3.0",
        "optionD": "Error",
        "answer": "3"
    },
    {
        "question": "Which method is used to start a thread in Java?",
        "optionA": "run()",
        "optionB": "start()",
        "optionC": "init()",
        "optionD": "begin()",
        "answer": "start()"
    },
    {
        "question": "Which of the following is a valid declaration of a String in Java?",
        "optionA": "String str = 'Hello';",
        "optionB": "String str = 'Hello World';",
        "optionC": "String str = \"Hello\";",
        "optionD": "String str = Hello;",
        "answer": "String str = \"Hello\";"
    },
    {
        "question": "Which of the following is used to handle exceptions in Java?",
        "optionA": "try-catch block",
        "optionB": "throw statement",
        "optionC": "finally block",
        "optionD": "assert statement",
        "answer": "try-catch block"
    },
    {
        "question": "What is the size of an int variable in Java?",
        "optionA": "16 bits",
        "optionB": "32 bits",
        "optionC": "64 bits",
        "optionD": "128 bits",
        "answer": "32 bits"
    },
    {
        "question": "What is the correct way to declare a constant in Java?",
        "optionA": "const int x = 10;",
        "optionB": "final int x = 10;",
        "optionC": "int final x = 10;",
        "optionD": "constant int x = 10;",
        "answer": "final int x = 10;"
    },
    {
        "question": "Which of the following is not a primitive data type in Java?",
        "optionA": "int",
        "optionB": "float",
        "optionC": "String",
        "optionD": "boolean",
        "answer": "String"
    },
    {
        "question": "Which of the following is the correct way to instantiate a StringBuilder object?",
        "optionA": "StringBuilder sb = new StringBuilder();",
        "optionB": "StringBuilder sb = new String();",
        "optionC": "StringBuilder sb = StringBuilder();",
        "optionD": "StringBuilder sb = new StringBuffer();",
        "answer": "StringBuilder sb = new StringBuilder();"
    },
    {
        "question": "Which of the following classes are part of the Java Collections Framework?",
        "optionA": "ArrayList",
        "optionB": "HashMap",
        "optionC": "LinkedList",
        "optionD": "All of the above",
        "answer": "All of the above"
    },
    {
        "question": "What is the output of the following code?\nSystem.out.println(5 + 3 * 2);",
        "optionA": "11",
        "optionB": "16",
        "optionC": "13",
        "optionD": "23",
        "answer": "11"
    },
    {
        "question": "Which of the following is used to implement the concept of inheritance in Java?",
        "optionA": "extends",
        "optionB": "implements",
        "optionC": "inherits",
        "optionD": "super",
        "answer": "extends"
    },
    {
        "question": "Which of the following is the correct way to create a thread in Java?",
        "optionA": "Thread t = new Thread();",
        "optionB": "Thread t = new Runnable();",
        "optionC": "Thread t = new RunnableThread();",
        "optionD": "Thread t = new ThreadRunnable();",
        "answer": "Thread t = new Thread();"
    },
    {
        "question": "Which of the following is the correct syntax for a switch statement in Java?",
        "optionA": "switch (expression) { case value: break; }",
        "optionB": "switch (expression) { case value }",
        "optionC": "switch expression { value case: break; }",
        "optionD": "switch expression { break case value; }",
        "answer": "switch (expression) { case value: break; }"
    },
    {
        "question": "Which method is used to compare two strings in Java?",
        "optionA": "compareTo()",
        "optionB": "equals()",
        "optionC": "compare()",
        "optionD": "match()",
        "answer": "equals()"
    },
    {
        "question": "Which of the following is a valid constructor in Java?",
        "optionA": "public MyClass() {}",
        "optionB": "MyClass() {}",
        "optionC": "void MyClass() {}",
        "optionD": "MyClass() : {}",
        "answer": "public MyClass() {}"
    },
    {
        "question": "Which of the following is true about Java?",
        "optionA": "Java is a platform-dependent language.",
        "optionB": "Java is a platform-independent language.",
        "optionC": "Java is a low-level programming language.",
        "optionD": "Java is a procedural programming language.",
        "answer": "Java is a platform-independent language."
    },
    {
        "question": "What is the default value of a reference variable in Java?",
        "optionA": "0",
        "optionB": "null",
        "optionC": "undefined",
        "optionD": "false",
        "answer": "null"
    },
    {
        "question": "Which of the following is the correct syntax for a for-each loop in Java?",
        "optionA": "for (int i : array) {}",
        "optionB": "for each (int i : array) {}",
        "optionC": "for (array each i) {}",
        "optionD": "for (int i in array) {}",
        "answer": "for (int i : array) {}"
    },
    {
        "question": "What is the purpose of the 'this' keyword in Java?",
        "optionA": "Refers to the current object",
        "optionB": "Refers to the superclass",
        "optionC": "Refers to the static method",
        "optionD": "Refers to the parent class",
        "answer": "Refers to the current object"
    },
    {
        "question": "Which of the following is true about the 'final' keyword in Java?",
        "optionA": "A final variable can be reassigned.",
        "optionB": "A final class cannot be inherited.",
        "optionC": "A final method can be overridden.",
        "optionD": "None of the above",
        "answer": "A final class cannot be inherited."
    },
    {
        "question": "Which of the following is used to create an object of a class in Java?",
        "optionA": "new",
        "optionB": "create",
        "optionC": "object",
        "optionD": "instantiate",
        "answer": "new"
    },
    {
        "question": "Which of the following is the correct way to declare a 2D array in Java?",
        "optionA": "int[][] arr = new int[5][5];",
        "optionB": "int arr[5][5] = new int[];",
        "optionC": "int arr[5][5];",
        "optionD": "int arr = new int[5][5];",
        "answer": "int[][] arr = new int[5][5];"
    },
    {
        "question": "Which of the following is used to perform method overloading in Java?",
        "optionA": "Same method name with different parameter types",
        "optionB": "Same method name with the same parameter types",
        "optionC": "Different method names with the same parameter types",
        "optionD": "Same method name with the same return type",
        "answer": "Same method name with different parameter types"
    },
    {
        "question": "Which of the following is true about Java packages?",
        "optionA": "A package is a group of related classes and interfaces.",
        "optionB": "A package is a group of unrelated classes.",
        "optionC": "A package is used to define the class constructor.",
        "optionD": "Packages are used to define methods only.",
        "answer": "A package is a group of related classes and interfaces."
    },
    {
        "question": "Which of the following is the correct syntax for a constructor in Java?",
        "optionA": "public ConstructorName() {}",
        "optionB": "ConstructorName() {}",
        "optionC": "public void ConstructorName() {}",
        "optionD": "ConstructorName() : {}",
        "answer": "public ConstructorName() {}"
    },
    {
        "question": "What is the purpose of the 'super' keyword in Java?",
        "optionA": "Refers to the superclass constructor",
        "optionB": "Refers to the current class constructor",
        "optionC": "Refers to the parent class method",
        "optionD": "Refers to the static method",
        "answer": "Refers to the superclass constructor"
    },
    {
        "question": "Which of the following is used to check if an object is an instance of a particular class in Java?",
        "optionA": "instanceof operator",
        "optionB": "isInstance() method",
        "optionC": "getClass() method",
        "optionD": "typeOf() method",
        "answer": "instanceof operator"
    },
    {
        "question": "Which of the following is true about Java interfaces?",
        "optionA": "An interface can have both abstract and concrete methods.",
        "optionB": "An interface cannot have any methods.",
        "optionC": "An interface can have only abstract methods.",
        "optionD": "An interface can have only constructors.",
        "answer": "An interface can have both abstract and concrete methods."
    },
    {
        "question": "Which of the following access modifiers allows access within the same package and subclasses?",
        "optionA": "private",
        "optionB": "protected",
        "optionC": "default",
        "optionD": "public",
        "answer": "protected"
    },
    {
        "question": "What is the purpose of the 'static' keyword in Java?",
        "optionA": "It allows the method to be invoked without creating an object.",
        "optionB": "It allows a method to be overridden.",
        "optionC": "It makes the variable instance-specific.",
        "optionD": "It makes the method private.",
        "answer": "It allows the method to be invoked without creating an object."
    },
    {
        "question": "Which of the following is true about Java constructors?",
        "optionA": "A constructor can have a return type.",
        "optionB": "A constructor can be overloaded.",
        "optionC": "A constructor cannot be overloaded.",
        "optionD": "A constructor can be private.",
        "answer": "A constructor can be overloaded."
    },
    {
        "question": "Which of the following methods is used to get the length of an array in Java?",
        "optionA": "length()",
        "optionB": "size()",
        "optionC": "getSize()",
        "optionD": "length",
        "answer": "length"
    },
    {
        "question": "What is the default value of an int variable in Java?",
        "optionA": "0",
        "optionB": "null",
        "optionC": "undefined",
        "optionD": "1",
        "answer": "0"
    },
    {
        "question": "Which of the following statements is true about the 'finally' block in Java?",
        "optionA": "The 'finally' block is always executed regardless of whether an exception occurs or not.",
        "optionB": "The 'finally' block is executed only if an exception occurs.",
        "optionC": "The 'finally' block is optional.",
        "optionD": "The 'finally' block can be skipped if the program is successful.",
        "answer": "The 'finally' block is always executed regardless of whether an exception occurs or not."
    },
    {
        "question": "Which of the following is true about the 'String' class in Java?",
        "optionA": "String objects are mutable.",
        "optionB": "String objects are immutable.",
        "optionC": "String objects cannot be created.",
        "optionD": "String objects are synchronized.",
        "answer": "String objects are immutable."
    },
    {
        "question": "Which of the following is used to get the current time in milliseconds in Java?",
        "optionA": "System.getCurrentTimeMillis()",
        "optionB": "System.currentTimeMillis()",
        "optionC": "Date.getTime()",
        "optionD": "Time.getCurrentTime()",
        "answer": "System.currentTimeMillis()"
    },
    {
        "question": "Which of the following is the correct syntax to declare a method that returns an int in Java?",
        "optionA": "int methodName() {}",
        "optionB": "void methodName(int) {}",
        "optionC": "int methodName(int) {}",
        "optionD": "void methodName() {}",
        "answer": "int methodName(int) {}"
    },
    {
        "question": "What is the output of the following code?\nSystem.out.println('A' + 'B');",
        "optionA": "65",
        "optionB": "130",
        "optionC": "AB",
        "optionD": "Error",
        "answer": "130"
    },
    {
        "question": "Which of the following is used to implement the concept of polymorphism in Java?",
        "optionA": "Method Overloading",
        "optionB": "Method Overriding",
        "optionC": "Constructor Overloading",
        "optionD": "Method Overloading and Method Overriding",
        "answer": "Method Overloading and Method Overriding"
    },
    {
        "question": "Which of the following is used to declare an array in Java?",
        "optionA": "array[] int;",
        "optionB": "int[] array;",
        "optionC": "int array[];",
        "optionD": "Both B and C",
        "answer": "Both B and C"
    },
    {
        "question": "Which of the following is the default access modifier in Java?",
        "optionA": "private",
        "optionB": "protected",
        "optionC": "public",
        "optionD": "default",
        "answer": "default"
    },
    {
        "question": "Which of the following is not a valid loop in Java?",
        "optionA": "for",
        "optionB": "while",
        "optionC": "do-while",
        "optionD": "repeat",
        "answer": "repeat"
    },
    {
        "question": "Which of the following methods is used to read input from the user in Java?",
        "optionA": "System.in.read()",
        "optionB": "Scanner.read()",
        "optionC": "Scanner.next()",
        "optionD": "System.read()",
        "answer": "Scanner.next()"
    },
    {
        "question": "Which of the following is used to create a new thread in Java?",
        "optionA": "Thread t = new Thread();",
        "optionB": "Runnable t = new Runnable();",
        "optionC": "Thread t = new Thread(Runnable);",
        "optionD": "Runnable t = new Thread();",
        "answer": "Thread t = new Thread();"
    },
    {
        "question": "Which of the following is true about Java's 'main' method?",
        "optionA": "It is the entry point for a Java application.",
        "optionB": "It is called automatically when the program starts.",
        "optionC": "It must be declared as 'public static void main(String[] args)'.",
        "optionD": "All of the above.",
        "answer": "All of the above."
    },
    {
        "question": "Which of the following is a valid Java identifier?",
        "optionA": "1stName",
        "optionB": "_firstName",
        "optionC": "first Name",
        "optionD": "first-Name",
        "answer": "_firstName"
    },
    {
        "question": "Which of the following is used to import a package in Java?",
        "optionA": "import package.name;",
        "optionB": "include package.name;",
        "optionC": "use package.name;",
        "optionD": "import(name) package;",
        "answer": "import package.name;"
    },
    {
        "question": "Which of the following is the correct way to handle an exception in Java?",
        "optionA": "try-catch-finally",
        "optionB": "throw-catch",
        "optionC": "catch-finally",
        "optionD": "try-throw",
        "answer": "try-catch-finally"
    },
    {
        "question": "What is the output of the following code?\nSystem.out.println(10 % 3);",
        "optionA": "3",
        "optionB": "2",
        "optionC": "1",
        "optionD": "Error",
        "answer": "1"
    },
    {
        "question": "Which of the following is a valid way to declare a constant in Java?",
        "optionA": "final int x = 10;",
        "optionB": "const int x = 10;",
        "optionC": "constant int x = 10;",
        "optionD": "int final x = 10;",
        "answer": "final int x = 10;"
    },
    {
        "question": "Which of the following methods is used to get the length of a String in Java?",
        "optionA": "length()",
        "optionB": "size()",
        "optionC": "lengthOf()",
        "optionD": "getLength()",
        "answer": "length()"
    },
    {
        "question": "What is the default value of a float variable in Java?",
        "optionA": "0.0",
        "optionB": "0",
        "optionC": "null",
        "optionD": "undefined",
        "answer": "0.0"
    },
    {
        "question": "Which of the following is used to create an instance of an abstract class in Java?",
        "optionA": "new AbstractClass();",
        "optionB": "new AbstractClass() {}",
        "optionC": "new ConcreteClass();",
        "optionD": "You cannot instantiate an abstract class.",
        "answer": "You cannot instantiate an abstract class."
    },
    {
        "question": "Which of the following methods is used to check whether a String contains a specific substring in Java?",
        "optionA": "contains()",
        "optionB": "hasSubstring()",
        "optionC": "indexOf()",
        "optionD": "findSubstring()",
        "answer": "contains()"
    },
    {
        "question": "Which of the following is used to create a thread-safe collection in Java?",
        "optionA": "Vector",
        "optionB": "ArrayList",
        "optionC": "HashSet",
        "optionD": "LinkedList",
        "answer": "Vector"
    },
    {
        "question": "Which of the following is a feature of Java's 'synchronized' keyword?",
        "optionA": "It makes a method or block thread-safe.",
        "optionB": "It ensures that only one thread can execute the method or block at a time.",
        "optionC": "It allows multiple threads to execute the method or block concurrently.",
        "optionD": "Both A and B",
        "answer": "Both A and B"
    },
    {
        "question": "Which of the following is used to implement a method in an interface in Java?",
        "optionA": "abstract",
        "optionB": "default",
        "optionC": "static",
        "optionD": "final",
        "answer": "default"
    },
    {
        "question": "Which of the following is true about 'super' in Java?",
        "optionA": "It refers to the superclass constructor.",
        "optionB": "It refers to the current class constructor.",
        "optionC": "It refers to the parent class method.",
        "optionD": "It refers to the current class method.",
        "answer": "It refers to the superclass constructor."
    },
    {
        "question": "Which of the following is used to implement a singleton pattern in Java?",
        "optionA": "private constructor and public static method",
        "optionB": "private constructor and public constructor",
        "optionC": "public constructor and public static method",
        "optionD": "private static constructor and public static method",
        "answer": "private constructor and public static method"
    },
    {
        "question": "Which of the following is the correct way to declare a constructor in Java?",
        "optionA": "public ConstructorName() {}",
        "optionB": "ConstructorName() {}",
        "optionC": "void ConstructorName() {}",
        "optionD": "ConstructorName() : {}",
        "answer": "public ConstructorName() {}"
    },
    {
        "question": "What is the default value of a char variable in Java?",
        "optionA": "0",
        "optionB": "null",
        "optionC": "' ' (space)",
        "optionD": "'0'",
        "answer": "' ' (space)"
    },
    {
        "question": "Which of the following is used to compare two primitive data types in Java?",
        "optionA": "equals()",
        "optionB": "compareTo()",
        "optionC": "==",
        "optionD": "compare()",
        "answer": "=="
    },
    {
        "question": "Which of the following is true about the 'static' keyword in Java?",
        "optionA": "Static variables and methods belong to the class rather than an instance.",
        "optionB": "Static methods can be called without creating an instance of the class.",
        "optionC": "Static variables and methods are shared among all instances of the class.",
        "optionD": "All of the above.",
        "answer": "All of the above."
    },
    {
        "question": "Which of the following is used to handle a runtime exception in Java?",
        "optionA": "try-catch",
        "optionB": "try-catch-finally",
        "optionC": "throw",
        "optionD": "throws",
        "answer": "try-catch"
    },
    {
        "question": "Which of the following is used to remove an element from a List in Java?",
        "optionA": "remove()",
        "optionB": "delete()",
        "optionC": "removeElement()",
        "optionD": "deleteElement()",
        "answer": "remove()"
    },
    {
        "question": "Which of the following is used to get the value of a specific element in a List in Java?",
        "optionA": "get()",
        "optionB": "fetch()",
        "optionC": "retrieve()",
        "optionD": "getElement()",
        "answer": "get()"
    },
    {
        "question": "Which of the following is true about method overriding in Java?",
        "optionA": "It allows a subclass to provide a specific implementation of a method already provided by its superclass.",
        "optionB": "It is done by using the 'super' keyword.",
        "optionC": "It is done by using the 'final' keyword.",
        "optionD": "It is done by using the 'static' keyword.",
        "answer": "It allows a subclass to provide a specific implementation of a method already provided by its superclass."
    },
    {
        "question": "Which of the following is true about method overloading in Java?",
        "optionA": "It is when two methods in the same class have the same name but different parameter lists.",
        "optionB": "It is when two methods in the same class have the same name and the same parameter lists.",
        "optionC": "It is when a method in the superclass is overridden by a method in the subclass.",
        "optionD": "It is when a method in the superclass is hidden by a method in the subclass.",
        "answer": "It is when two methods in the same class have the same name but different parameter lists."
    },
    {
        "question": "What is the use of the 'volatile' keyword in Java?",
        "optionA": "To create a constant variable",
        "optionB": "To mark a variable for garbage collection",
        "optionC": "To indicate a variable may be accessed by multiple threads",
        "optionD": "To define a synchronized block",
        "answer": "To indicate a variable may be accessed by multiple threads"
    },
    {
        "question": "Which keyword is used to inherit a class in Java?",
        "optionA": "implements",
        "optionB": "extends",
        "optionC": "inherits",
        "optionD": "super",
        "answer": "extends"
    },
    {
        "question": "Which of the following methods is used to join two threads in Java?",
        "optionA": "join()",
        "optionB": "merge()",
        "optionC": "combine()",
        "optionD": "connect()",
        "answer": "join()"
    },
    {
        "question": "What is the default value of a double variable in Java?",
        "optionA": "0.0",
        "optionB": "0",
        "optionC": "null",
        "optionD": "undefined",
        "answer": "0.0"
    },
    {
        "question": "What does the 'transient' keyword indicate in Java?",
        "optionA": "A variable is constant",
        "optionB": "A variable should not be serialized",
        "optionC": "A variable is static",
        "optionD": "A variable is abstract",
        "answer": "A variable should not be serialized"
    },
    {
        "question": "Which package contains the Random class in Java?",
        "optionA": "java.util",
        "optionB": "java.math",
        "optionC": "java.lang",
        "optionD": "java.io",
        "answer": "java.util"
    },
    {
        "question": "What is the correct syntax for creating a generic ArrayList in Java?",
        "optionA": "ArrayList<int> list = new ArrayList<>();",
        "optionB": "ArrayList<Integer> list = new ArrayList<>();",
        "optionC": "ArrayList list = new ArrayList<Integer>();",
        "optionD": "ArrayList<Integer> list = new ArrayList();",
        "answer": "ArrayList<Integer> list = new ArrayList<>();"
    },
    {
        "question": "Which of these statements about enums in Java is true?",
        "optionA": "Enums can have fields and methods",
        "optionB": "Enums cannot be used in switch statements",
        "optionC": "Enums cannot extend other classes",
        "optionD": "Enums can be instantiated directly",
        "answer": "Enums can have fields and methods"
    },
    {
        "question": "Which of the following is a marker interface in Java?",
        "optionA": "Serializable",
        "optionB": "Runnable",
        "optionC": "Cloneable",
        "optionD": "Both Serializable and Cloneable",
        "answer": "Both Serializable and Cloneable"
    },
    {
        "question": "What is the default value of a local variable in Java?",
        "optionA": "0",
        "optionB": "null",
        "optionC": "undefined",
        "optionD": "Depends on the data type",
        "answer": "undefined"
    },
    {
        "question": "Which of the following is not a reserved keyword in Java?",
        "optionA": "goto",
        "optionB": "const",
        "optionC": "instanceof",
        "optionD": "typeof",
        "answer": "typeof"
    },
    {
        "question": "Which exception is thrown when a division by zero occurs in Java?",
        "optionA": "ArithmeticException",
        "optionB": "IllegalArgumentException",
        "optionC": "NullPointerException",
        "optionD": "IndexOutOfBoundsException",
        "answer": "ArithmeticException"
    },
    {
        "question": "What is the maximum value of an int in Java?",
        "optionA": "2^31",
        "optionB": "2^31 - 1",
        "optionC": "2^32",
        "optionD": "2^32 - 1",
        "answer": "2^31 - 1"
    },
    {
        "question": "Which of the following is used to implement a functional interface in Java?",
        "optionA": "Lambda expressions",
        "optionB": "Abstract classes",
        "optionC": "Interfaces with default methods",
        "optionD": "Nested classes",
        "answer": "Lambda expressions"
    },
    {
        "question": "What does the 'synchronized' keyword do in Java?",
        "optionA": "Makes the variable constant",
        "optionB": "Restricts access to a block of code to one thread at a time",
        "optionC": "Allows the method to be called from multiple threads",
        "optionD": "Marks the variable for serialization",
        "answer": "Restricts access to a block of code to one thread at a time"
    },
    {
        "question": "Which method is called to perform cleanup operations before an object is garbage collected?",
        "optionA": "finalize()",
        "optionB": "dispose()",
        "optionC": "clean()",
        "optionD": "destroy()",
        "answer": "finalize()"
    },
    {
        "question": "What does the 'instanceof' operator do in Java?",
        "optionA": "Checks whether an object belongs to a specific class",
        "optionB": "Creates an instance of a class",
        "optionC": "Returns the hash code of an object",
        "optionD": "Checks whether an object is null",
        "answer": "Checks whether an object belongs to a specific class"
    },
    {
        "question": "What is the size of a long variable in Java?",
        "optionA": "32 bits",
        "optionB": "64 bits",
        "optionC": "128 bits",
        "optionD": "16 bits",
        "answer": "64 bits"
    },
    {
        "question": "Which of the following is not a feature of Java?",
        "optionA": "Object-oriented",
        "optionB": "Platform-dependent",
        "optionC": "Robust",
        "optionD": "Secure",
        "answer": "Platform-dependent"
    },
    {
        "question": "Which of the following is used to read a file in Java?",
        "optionA": "FileReader",
        "optionB": "FileInputStream",
        "optionC": "BufferedReader",
        "optionD": "All of the above",
        "answer": "All of the above"
    },
    {
        "question": "What is the result of the following code?\nSystem.out.println(10 << 2);",
        "optionA": "20",
        "optionB": "40",
        "optionC": "30",
        "optionD": "50",
        "answer": "40"
    },
    {
        "question": "Which of the following is used to create an immutable list in Java?",
        "optionA": "Collections.unmodifiableList()",
        "optionB": "List.immutable()",
        "optionC": "List.readOnly()",
        "optionD": "List.fixed()",
        "answer": "Collections.unmodifiableList()"
    },
    {
        "question": "Which of the following is true about Java's default constructors?",
        "optionA": "They take arguments",
        "optionB": "They are created automatically if no constructor is defined",
        "optionC": "They must be declared explicitly",
        "optionD": "They can be static",
        "answer": "They are created automatically if no constructor is defined"
    },
    {
        "question": "Which of the following classes in Java is immutable?",
        "optionA": "String",
        "optionB": "StringBuilder",
        "optionC": "StringBuffer",
        "optionD": "None of the above",
        "answer": "String"
    },
    {
        "question": "Which of the following is used to convert a String to an int in Java?",
        "optionA": "Integer.valueOf()",
        "optionB": "Integer.parseInt()",
        "optionC": "Integer.toInt()",
        "optionD": "Int.parse()",
        "answer": "Integer.parseInt()"
    },
    {
        "question": "What is the purpose of the 'break' statement in Java?",
        "optionA": "To exit a loop",
        "optionB": "To terminate the program",
        "optionC": "To pause the execution of a thread",
        "optionD": "To skip an iteration in a loop",
        "answer": "To exit a loop"
    },
    {
        "question": "Which of the following is a valid way to declare a lambda expression in Java?",
        "optionA": "() -> System.out.println(\"Hello\")",
        "optionB": "(String s) -> { return s.length(); }",
        "optionC": "(int x, int y) -> x + y",
        "optionD": "All of the above",
        "answer": "All of the above"
    },
    {
        "question": "Which method in Java is used to sort an array?",
        "optionA": "Arrays.sort()",
        "optionB": "Collections.sort()",
        "optionC": "List.sort()",
        "optionD": "Sort.array()",
        "answer": "Arrays.sort()"
    },
    {
        "question": "Which of these is a correct way to start a thread?",
        "optionA": "Thread t = new Thread(); t.run();",
        "optionB": "Thread t = new Thread(); t.start();",
        "optionC": "Runnable r = new Runnable(); r.start();",
        "optionD": "Thread.start(new Runnable());",
        "answer": "Thread t = new Thread(); t.start();"
    },
    {
        "question": "Which of the following is not a wrapper class in Java?",
        "optionA": "Integer",
        "optionB": "Float",
        "optionC": "Character",
        "optionD": "String",
        "answer": "String"
    }
]